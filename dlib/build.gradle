plugins {
    id "com.google.protobuf"
    id 'com.android.library'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        }
//
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-16",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DANDROID_STL=c++_shared",
                        "-DANDROID_CPP_FEATURES=rtti exceptions",
                        "-Dprotobuf_BUILD_TESTS=OFF",
                        "-Dprotobuf_WITH_ZLIB=OFF"

                cppFlags "-std=c++11 -frtti -fexceptions"
                targets "libprotobuf-lite", "dlib", "dlib_jni"
            }
        }
//        externalNativeBuild {
//            cmake {
//                cppFlags ''
//            }
//        }
    }

//    ndkVersion "22.1.7171670"
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
            version '3.18.1'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude "**/*.proto"
    }

    sourceSets {
        main {
            proto {
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.17.3'
    }
    generateProtoTasks {
        generatedFilesBaseDir = "$projectDir/src/generated"

        // all() returns the collection of all protoc tasks
        all().each { task ->

            task.builtins {
                java {
                    option "lite"
                }
                // Add cpp output without any option.
                // DO NOT omit the braces if you want this builtin to be added.
                // This yields
                // "--cpp_out=/path/to/output" on the protoc commandline.
                cpp {
                    option "lite"
                }
            }
        }
    }
}

dependencies {
    api 'com.google.protobuf:protobuf-javalite:3.17.3'
}