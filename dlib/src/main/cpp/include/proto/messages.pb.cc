// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace nz {
namespace co {
namespace colensobbdo {
namespace dlib {
namespace proto {
constexpr Landmark::Landmark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct LandmarkDefaultTypeInternal {
  constexpr LandmarkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarkDefaultTypeInternal() {}
  union {
    Landmark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarkDefaultTypeInternal _Landmark_default_instance_;
constexpr LandmarkList::LandmarkList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : landmarks_(){}
struct LandmarkListDefaultTypeInternal {
  constexpr LandmarkListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandmarkListDefaultTypeInternal() {}
  union {
    LandmarkList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
constexpr RectF::RectF(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , top_(0)
  , right_(0)
  , bottom_(0){}
struct RectFDefaultTypeInternal {
  constexpr RectFDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectFDefaultTypeInternal() {}
  union {
    RectF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectFDefaultTypeInternal _RectF_default_instance_;
constexpr RectFList::RectFList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rects_(){}
struct RectFListDefaultTypeInternal {
  constexpr RectFListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectFListDefaultTypeInternal() {}
  union {
    RectFList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectFListDefaultTypeInternal _RectFList_default_instance_;
constexpr Face::Face(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : landmarks_()
  , bound_(nullptr){}
struct FaceDefaultTypeInternal {
  constexpr FaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceDefaultTypeInternal() {}
  union {
    Face _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceDefaultTypeInternal _Face_default_instance_;
constexpr FaceList::FaceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : faces_(){}
struct FaceListDefaultTypeInternal {
  constexpr FaceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceListDefaultTypeInternal() {}
  union {
    FaceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceListDefaultTypeInternal _FaceList_default_instance_;
}  // namespace proto
}  // namespace dlib
}  // namespace colensobbdo
}  // namespace co
}  // namespace nz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Landmark, x_),
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Landmark, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::LandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::LandmarkList, landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectF, left_),
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectF, top_),
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectF, right_),
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectF, bottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectFList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::RectFList, rects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Face, bound_),
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::Face, landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::FaceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nz::co::colensobbdo::dlib::proto::FaceList, faces_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nz::co::colensobbdo::dlib::proto::Landmark)},
  { 7, -1, sizeof(::nz::co::colensobbdo::dlib::proto::LandmarkList)},
  { 13, -1, sizeof(::nz::co::colensobbdo::dlib::proto::RectF)},
  { 22, -1, sizeof(::nz::co::colensobbdo::dlib::proto::RectFList)},
  { 28, -1, sizeof(::nz::co::colensobbdo::dlib::proto::Face)},
  { 35, -1, sizeof(::nz::co::colensobbdo::dlib::proto::FaceList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_Landmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_LandmarkList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_RectF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_RectFList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_Face_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nz::co::colensobbdo::dlib::proto::_FaceList_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\034nz.co.colensobbdo.dlib"
  ".proto\" \n\010Landmark\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002"
  "\"I\n\014LandmarkList\0229\n\tlandmarks\030\001 \003(\0132&.nz"
  ".co.colensobbdo.dlib.proto.Landmark\"A\n\005R"
  "ectF\022\014\n\004left\030\001 \001(\002\022\013\n\003top\030\002 \001(\002\022\r\n\005right"
  "\030\003 \001(\002\022\016\n\006bottom\030\004 \001(\002\"\?\n\tRectFList\0222\n\005r"
  "ects\030\001 \003(\0132#.nz.co.colensobbdo.dlib.prot"
  "o.RectF\"u\n\004Face\0222\n\005bound\030\001 \001(\0132#.nz.co.c"
  "olensobbdo.dlib.proto.RectF\0229\n\tlandmarks"
  "\030\002 \003(\0132&.nz.co.colensobbdo.dlib.proto.La"
  "ndmark\"=\n\010FaceList\0221\n\005faces\030\001 \003(\0132\".nz.c"
  "o.colensobbdo.dlib.proto.Faceb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 477, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace nz {
namespace co {
namespace colensobbdo {
namespace dlib {
namespace proto {

// ===================================================================

class Landmark::_Internal {
 public:
};

Landmark::Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.Landmark)
}

void Landmark::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.Landmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Landmark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Landmark::ArenaDtor(void* object) {
  Landmark* _this = reinterpret_cast< Landmark* >(object);
  (void)_this;
}
void Landmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Landmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.Landmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Landmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.Landmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Landmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Landmark, y_)
      + sizeof(Landmark::y_)
      - PROTOBUF_FIELD_OFFSET(Landmark, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Landmark::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class LandmarkList::_Internal {
 public:
};

LandmarkList::LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.LandmarkList)
}

void LandmarkList::SharedCtor() {
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.LandmarkList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandmarkList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LandmarkList::ArenaDtor(void* object) {
  LandmarkList* _this = reinterpret_cast< LandmarkList* >(object);
  (void)_this;
}
void LandmarkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 1;
  total_size += 1UL * this->_internal_landmarks_size();
  for (const auto& msg : this->landmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.LandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.LandmarkList)
    MergeFrom(*source);
  }
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
}

void LandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class RectF::_Internal {
 public:
};

RectF::RectF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.RectF)
}
RectF::RectF(const RectF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.RectF)
}

void RectF::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

RectF::~RectF() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.RectF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RectF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectF::ArenaDtor(void* object) {
  RectF* _this = reinterpret_cast< RectF* >(object);
  (void)_this;
}
void RectF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectF::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.RectF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.RectF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.RectF)
  return target;
}

size_t RectF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.RectF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.RectF)
  GOOGLE_DCHECK_NE(&from, this);
  const RectF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.RectF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.RectF)
    MergeFrom(*source);
  }
}

void RectF::MergeFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.RectF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.left() <= 0 && from.left() >= 0)) {
    _internal_set_left(from._internal_left());
  }
  if (!(from.top() <= 0 && from.top() >= 0)) {
    _internal_set_top(from._internal_top());
  }
  if (!(from.right() <= 0 && from.right() >= 0)) {
    _internal_set_right(from._internal_right());
  }
  if (!(from.bottom() <= 0 && from.bottom() >= 0)) {
    _internal_set_bottom(from._internal_bottom());
  }
}

void RectF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectF::CopyFrom(const RectF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.RectF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectF::IsInitialized() const {
  return true;
}

void RectF::InternalSwap(RectF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectF, bottom_)
      + sizeof(RectF::bottom_)
      - PROTOBUF_FIELD_OFFSET(RectF, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectF::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class RectFList::_Internal {
 public:
};

RectFList::RectFList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.RectFList)
}
RectFList::RectFList(const RectFList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.RectFList)
}

void RectFList::SharedCtor() {
}

RectFList::~RectFList() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.RectFList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RectFList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectFList::ArenaDtor(void* object) {
  RectFList* _this = reinterpret_cast< RectFList* >(object);
  (void)_this;
}
void RectFList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectFList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectFList::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.RectFList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectFList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nz.co.colensobbdo.dlib.proto.RectF rects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectFList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.RectFList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.RectF rects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.RectFList)
  return target;
}

size_t RectFList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.RectFList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.RectF rects = 1;
  total_size += 1UL * this->_internal_rects_size();
  for (const auto& msg : this->rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectFList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.RectFList)
  GOOGLE_DCHECK_NE(&from, this);
  const RectFList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectFList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.RectFList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.RectFList)
    MergeFrom(*source);
  }
}

void RectFList::MergeFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.RectFList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
}

void RectFList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.RectFList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectFList::CopyFrom(const RectFList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.RectFList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectFList::IsInitialized() const {
  return true;
}

void RectFList::InternalSwap(RectFList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rects_.InternalSwap(&other->rects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RectFList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class Face::_Internal {
 public:
  static const ::nz::co::colensobbdo::dlib::proto::RectF& bound(const Face* msg);
};

const ::nz::co::colensobbdo::dlib::proto::RectF&
Face::_Internal::bound(const Face* msg) {
  return *msg->bound_;
}
Face::Face(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.Face)
}
Face::Face(const Face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bound()) {
    bound_ = new ::nz::co::colensobbdo::dlib::proto::RectF(*from.bound_);
  } else {
    bound_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.Face)
}

void Face::SharedCtor() {
bound_ = nullptr;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.Face)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Face::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bound_;
}

void Face::ArenaDtor(void* object) {
  Face* _this = reinterpret_cast< Face* >(object);
  (void)_this;
}
void Face::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Face::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  if (GetArenaForAllocation() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Face::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nz.co.colensobbdo.dlib.proto.RectF bound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Face::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.Face)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nz.co.colensobbdo.dlib.proto.RectF bound = 1;
  if (this->has_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bound(this), target, stream);
  }

  // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_landmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.Face)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.Landmark landmarks = 2;
  total_size += 1UL * this->_internal_landmarks_size();
  for (const auto& msg : this->landmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .nz.co.colensobbdo.dlib.proto.RectF bound = 1;
  if (this->has_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bound_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Face::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.Face)
  GOOGLE_DCHECK_NE(&from, this);
  const Face* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Face>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.Face)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.Face)
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from.has_bound()) {
    _internal_mutable_bound()->::nz::co::colensobbdo::dlib::proto::RectF::MergeFrom(from._internal_bound());
  }
}

void Face::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::InternalSwap(Face* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
  swap(bound_, other->bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Face::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class FaceList::_Internal {
 public:
};

FaceList::FaceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  faces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nz.co.colensobbdo.dlib.proto.FaceList)
}
FaceList::FaceList(const FaceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nz.co.colensobbdo.dlib.proto.FaceList)
}

void FaceList::SharedCtor() {
}

FaceList::~FaceList() {
  // @@protoc_insertion_point(destructor:nz.co.colensobbdo.dlib.proto.FaceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FaceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaceList::ArenaDtor(void* object) {
  FaceList* _this = reinterpret_cast< FaceList* >(object);
  (void)_this;
}
void FaceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceList::Clear() {
// @@protoc_insertion_point(message_clear_start:nz.co.colensobbdo.dlib.proto.FaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nz.co.colensobbdo.dlib.proto.Face faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nz.co.colensobbdo.dlib.proto.FaceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.Face faces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nz.co.colensobbdo.dlib.proto.FaceList)
  return target;
}

size_t FaceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nz.co.colensobbdo.dlib.proto.FaceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nz.co.colensobbdo.dlib.proto.Face faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nz.co.colensobbdo.dlib.proto.FaceList)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nz.co.colensobbdo.dlib.proto.FaceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nz.co.colensobbdo.dlib.proto.FaceList)
    MergeFrom(*source);
  }
}

void FaceList::MergeFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nz.co.colensobbdo.dlib.proto.FaceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faces_.MergeFrom(from.faces_);
}

void FaceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nz.co.colensobbdo.dlib.proto.FaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceList::CopyFrom(const FaceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nz.co.colensobbdo.dlib.proto.FaceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceList::IsInitialized() const {
  return true;
}

void FaceList::InternalSwap(FaceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  faces_.InternalSwap(&other->faces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace dlib
}  // namespace colensobbdo
}  // namespace co
}  // namespace nz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::Landmark* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::Landmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::LandmarkList* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::LandmarkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::LandmarkList >(arena);
}
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::RectF* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::RectF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::RectF >(arena);
}
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::RectFList* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::RectFList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::RectFList >(arena);
}
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::Face* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::Face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::Face >(arena);
}
template<> PROTOBUF_NOINLINE ::nz::co::colensobbdo::dlib::proto::FaceList* Arena::CreateMaybeMessage< ::nz::co::colensobbdo::dlib::proto::FaceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nz::co::colensobbdo::dlib::proto::FaceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
